import mongoose from 'mongoose';
import bcrypt from 'bcrypt';

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: [true, 'Please provide a username'],
    unique: true,
    trim: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
    minlength: 8,
    select: false,
  },
  role: {
    type: String,
    enum: ['Admin', 'Member'],
    default: 'Member',
  },
  teamId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Team',
  },
}, { timestamps: true });

// ‚úÖ M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();

  console.log('üîí Hashing password...');
  try {
    this.password = await bcrypt.hash(this.password, 12);
    console.log('‚úÖ Password hashed!');
    next();
  } catch (err) {
    console.error('‚ùå Error hashing password:', err);
    next(err);
  }
});

// ‚úÖ So s√°nh m·∫≠t kh·∫©u khi ƒëƒÉng nh·∫≠p
userSchema.methods.matchPassword = async function (candidatePassword) {
  console.log('üîê Comparing password...');
  try {
    const result = await bcrypt.compare(candidatePassword, this.password);
    console.log('‚úÖ Password comparison result:', result);
    return result;
  } catch (err) {
    console.error('‚ùå Error comparing password:', err);
    throw err;
  }
};

const User = mongoose.model('User', userSchema);
export default User;
